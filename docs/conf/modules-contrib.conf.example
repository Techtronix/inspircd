#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# [CONTRIB] SHA1 module: Allows other modules to generate SHA1 hashes,
# usually for cryptographic uses and security.
#
# IMPORTANT:
# Other modules may rely on this module being loaded to function.
#<module name="m_sha1.so">
#
#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# [CONTRIB] GnuTLS hashing module: Adds various hash functions using the
# GnuTLS API. It adds: sha1, sha256, sha512, and ripemd160, as well as
# sha3-224, sha3-256, sha-384, and sha3-512 if GnuTLS is >3.5. This
# module CANNOT be loaded with m_sha1.so (extras), m_sha256, or
# m_ripemd160. m_md5 is not replaced by this module as it has special
# uses for other modules such as m_cloaking. This module also requires
# the gnutls libraries to be installed.
#<module name="m_hash_gnutls.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# [CONTRIB] Account host module: Allows setting hosts on users based on
# their account name on login.
#
# IMPORTANT:
# This module will set vhosts on connect, and vhosts from services such
# as HostServ may conflict with this.
#<module name="m_accounthost.so">
#<accounthost prefix="foo" suffix="bar" changereal="false">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# [CONTRIB] Anti-random module: Prevent against bots using random
# patterns.
#<module name="m_antirandom.so">
#<antirandom
#        showfailedconnects="1" #(Defaults to 1 )
#        debugmode="0" #(Defaults to 0)
#        threshold="10" #(Defaults to 10 Valid values between 1 and 100)
#        banaction="ZLINE" #(Defaults to "" Valid values: GLINE,ZLINE,KILL,"")
#        banduration="86400" #(Defaults to 86400 (1 day). Time in seconds)
#        banreason="You look like a bot. Change your nick/ident/gecos and try reconnecting.">
#   <antirandomexempt type="host" pattern="*.tld">
#   <antirandomexempt type="ident" pattern="*lightirc">
#   <antirandomexempt type="fullname" pattern="Mibbit">
#   Notes:
#    showfailedconnects - Show failed connection
#        This module uses a scoring system that will react based
#        on the threshold set above. If the threshold is set too low many
#        clients will be tagged a bot.

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# [CONTRIB] ASCII casemapping module: Implements CASEMAPPING=ascii.
# This module CANNOT be used with m_nationalchars.
#<module name="m_ascii.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# [CONTRIB] Authy module: Enables two factor authentication for oper
# blocks using Authy
#<module name="m_authy.so">
# ssl: select gnutls or openssl
# graceful: allow opers to log in anyways in case of an API failure
#<authy apikey="" ssl="" graceful="false">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# [CONTRIB] Autodrop module: Automatically drop clients if they send
# certain commands
#<module name="m_autodrop.so">
#<autodrop commands="CONNECT DELETE GET HEAD OPTIONS PATCH POST PUT TRACE">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# [CONTRIB] Autokick module: Automatically kick users when banned
#<module name="m_autokick.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# [CONTRIB] Block highlight module: Adds a channel mode which kills
# clients that mass highlight spam
#<module name="m_blockhighlight.so">
#<blockhighlight minlen="50" minusernum="10" reason="Mass highlight" stripcolor="yes">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# [CONTRIB] CAP chghost module: Implements the CAP 'chghost'. Note:
# due to limitations, if you have <options:cyclehosts> set to yes,
# clients with this cap will still see fake quit messages.
#<module name="m_cap_chghost.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# [CONTRIB] CAP notify module: Provides the cap-notify IRCv3 extension
#<module name="m_capnotify.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# [CONTRIB] Change cap module: Change the capitalization on channels
# via the /changecap command. Must be opped on the channel to use.
#<module name="m_changecap.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# [CONTRIB] CipersuiteJoin Module: Adds channel list mode +Z, which
# only lets clients join who use a ciphersuite on the list. You MUST
# load m_sslstatus_gnutls to use this module.
#<module name="m_ciphersuitejoin.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# [CONTRIB] Connection banner module: Displays a static text to every
# connecting user before registration. Similar to "*** Looking up your
# hostname" messages.
#<module name="m_conn_banner.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# [CONTRIB] Auto delayed join on connect module: Allows you to force
# users to join one or more channels automatically AFTER a specified
# delay on connect. If you use this module, do not use m_conn_join.so
#<module name="m_conn_delayed_join.so">
#
# This module also allows for setting autojoin and autojoindelay per
# connect class. Use <connect autojoin="" autojoindelay=""> to enable
# this functionality. Otherwise, the module will use the config below
#<autojoin channel="#one,#two,#three" delay="30">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# [CONTRIB] Custom penalty module: Allows the customization of command
# penalty levels.
#<module name="m_custompenalty.so">
# The below example sets the penalty for using INVITE to 60:
#<penalty name="INVITE" value="60">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# [CONTRIB] DCC blocking module: Provides support for blocking DCC
# transfers explicitly, without any configuration. If you wish to block
# DCC completely on your network, load this module and comment out
# m_dccallow above.
#<module name="m_dccblock.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# [CONTRIB] TCP DEFER-ACCEPT module: enables TCP_DEFER_ACCEPT on
# sockets. This module will only work on operating systems that support
# TCP_DEFER_ACCEPT, such as *nix. Add defer="" to your bind tags to
# enable in the format <bind defer="0">
#<module name="m_deferaccept.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# [CONTRIB] Disable modes module: Allows for disabling modes for users
# in specific connect blocks. To achieve this, add disablecmodes="" and
# disableumodes="" to your <connect> blocks.
#<module name="m_disablemodes.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# [CONTRIB] Extended ban redirect module: Allows redirection to another
# channel using a configured extended ban character. This module can be
# used alongside m_banredirect, although it is not required. Format is
# /mode #chan +b <extbanchar>:<chan>:<mask>, for example
# /mode #chan +b d:#comcast-lounge:*!*@*.comcast.net if using defaults
#<module name="m_extbanredirect.so">
#<extbanredirect char="d">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# [CONTRIB] FINDXLINE module: Provides the FINDXLINE and RMXLINE
# commands which allow for easy searching and removal of XLines
# Syntax: /FINDXLINE {<xline type>|*} <ban mask> [<reason>]
# Syntax: /RMXLINE {<xline type>|*} <ban mask> [<reason>]
# You may specify a specific type (such as 'g') or use * to search all
# lines.
#
# It is HIGHLY recommended that this module be used if you manage a lot
# of bans on your network.
#<module name="m_findxline.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# [CONTRIB] Flash policy module: adds a built-in flash policy daemon.
# Allows flash IRC clients to connect. A policy file can be specified;
# otherwise the module will automatically allow all client ports.
#
#<module name="m_flashpolicyd.so">
#
# Configuration:
# You must assign a port to this module, like:
#<bind address="" port="8430" type="flashpolicyd">
# and optionally a policy file:
#<flashpolicyd timeout="5" file="conf/flashpolicy.xml">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# [CONTRIB] Force ident module: Allows forcing idents on users based on
# their connect class.
# Example: <connect forceident="example">
#<module name="m_forceident.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# [CONTRIB] FULLVERSION module: Displays the full version of a server
# to an operator. 'FULLVERSION' needs to be added to the opertype in
# order for an operator to use it.
#<module name="m_fullversion.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Gecos ban: Implements extended ban 'r', which stops anyone matching
# a mask like +b r:*realname?here* from joining a channel.
#<module name="m_gecosban.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# [CONTRIB] GeoIP Ban module: Implements extban G - GeoIP Country Code.
# This module also adds country name and country code to WHOIS.
# This module requires the GeoIP libraries to be installed, as with
# m_geoip.
#<module name="m_geoipban.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# [CONTRIB] Hide idle module: Provides the +a usermode that hides idle
# and signon time in WHOIS from non-opers.
#<module name="m_hideidle.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# [CONTRIB] Ident metadata module: Stores the ident given in USER as
# metadata. This module has no use on production networks unless
# another module is loaded to use this information.
#<module name="m_identmeta.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# [CONTRIB] Invite Notify module: Adds the IRCv3 extension
# invite-notify.
#<module name="m_invitenotify.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# [CONTRIB] IRCv3 Strict-Transport-Security module: Adds the IRCv3
# 'sts' capability, which advertises a STS policy to compatible
# clients.
#
# Configuration:
# Duration is a time value, in seconds. The default is 1 month. Port
# should be set to whatever secured port you wish to advertise. 
# Preload indicates whether this policy should be included in client
# preload lists, like how Google Chrome maintains a list of HSTS sites
#<module name="m_ircv3_sts.so">
#<sts duration="2592000" port="6697" preload="no">


#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# [CONTRIB] JOIN 0 module: Implements /join 0, which makes a user part
# all channels. RFC2812.
#<module name="m_join0.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# [CONTRIB] Join-on-invite module: Forces a user to join a channel on
# invite. Be careful when using this module, as it is draconian in
# nature.
#<module name="m_joinoninvite.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# [CONTRIB] Join/Part SNotice module: adds the 'e' and 'p' snomask, for
# logging JOINs and PARTs. Compatible with m_chanlog, etc.
#<module name="m_joinpartsno.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# [CONTRIB] LUSERS without services module: Adds an extra line to
# LUSERS output to show global user count without clients from U-Lined
# servers.
#<module name="m_lusersnoservices.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# [CONTRIB] Named stats module: Allows /STATS queries by name. Can also
# be configured to add additional stats chars provided by modules and
# additional aliases. The following line enables core stats names:
#<namedstats enabledefaults="true">
# While additional named stats can be added with:
#<statsname name="" char="">
#<module name="m_namedstats.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# [CONTRIB] Nick delay module: Enforces a delay between nick changes
# per user. If hint is set to true, the user will be notified that
# their nick change was blocked. If operoverride is set to true, opers
# will not have their nick changes blocked. Delay is in seconds.
#<module name="m_nickdelay.so">
#<nickdelay delay="10" operoverride="true" hint="true">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# Nickchange flood protection module: Provides channel mode +F X:Y
# which allows up to X nick changes in Y seconds.
#<module name="m_nickflood.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# [CONTRIB] Nick in 001 module: Replaces the nick!user@host in
# RPL_WELCOME (001) with the user's nick.
#
# It was observed that certain (SOHO) routers rewrite their external IP
# address in the payload of the TCP packet containing the 001 numeric,
# causing disconnection if the lengths of the ASCII representations of
# the IP addresses differ.
#
# This module functions as a workaround by replacing the nick!user@host
# in 001 with just the nick.
#<module name="m_nickin001.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# [CONTRIB] No user CTCP module: Provides support for unreal-style user
# mode +T - which blocks CTCPs. If operoverride is set to yes, opers
# can bypass this mode.
#<module name="m_noctcp_user.so">
#<noctcpuser operoverride="no">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# [CONTRIB] No op on channel creation module: Don't op normal users when
# creating a new channel. Not recommended on production networks as
# this will prevent users from registering channels on their own. Opers
# are not affected.
#<module name="m_nooponcreate.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# [CONTRIB] No UID nick module: Disallows changing nick to UID using
# /nick. Generally, this blocks /nick 0. Does not block forced nick
# changes.
#<module name="m_nouidnick.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# [CONTRIB] Op moderation module: Adds channel mode +U and extban 'U' -
# moderator mute. This is similar to +z on charybdis/ircd-seven.
#<module name="m_opmoderated.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# [CONTRIB] Privdeaf module: Provides support for blocking any private
# messages using umode +D. Opers and U-Lined clients can optionally
# override this.
#<module name="m_privdeaf.so">
#<privdeaf operoverride="true" ulineoverride="true">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# [CONTRIB] Quiet ban module: Provides channel mode +q for 'quiet'
# bans, like on charybdis. This module CANNOT be used with m_muteban or
# m_chanprotect, nor m_customprefix with the q channel mode being used
# as a prefix.
#<module name="m_quietban.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# [CONTRIB] Regular expression provider for RE2 regular expressions.
# You must have the re2 library installed.
#<module name="m_regex_re2.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# [CONTRIB] Rehash SSL signal module: Allows reloading of SSL
# credentials (cert, key, etc.) on SIGUSR1. This is highly useful if
# your network uses Let's Encrypt, as this allows for an automated way
# to reload your certificates instead running '/rehash -ssl' on every
# server.
#<module name="m_rehashsslsignal.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# [CONTRIB] Replay message module: Replays messages sent to the server
# back to the sender. Adds the IRCv3 capabilities 'echo-message' and
# 'inspircd.org/replay-message'.
#<module name="m_replaymsg.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# [CONTRIB] Require auth module: Provides /aline and /galine, known as
# Auth-Lines. Users affected by these will have to use SASL to connect,
# while any users already connected but not logged in to services will
# be disconnected similar to a G-Line. Adds the stats chars 'a' and 'A'
# respectively.
#<module name="m_require_auth.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# [CONTRIB] Rotate log files module: Rotates log files after a defined
# period, in seconds.
#<module name="m_rotatelog.so">
#<rotatelog period="3600">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# [CONTRIB] Slow message module: Provides channel mode +W, and acts
# akin to slowmode on sites like YouTube. It functions similar to
# m_messageflood, but rejects messages over the limit instead of
# kicking or banning. It also adds exemption 'slowmode' to
# m_exemptchanops, if loaded.
# Example: /mode #chan +W 5:9 to throttle messages faster than 5 lines
# in 9 seconds.
#<module name="m_slowmode.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# [CONTRIB] SSL stats module: Provides stats about SSL ciphersuites in
# use by users. This module can ONLY be used with m_ssl_gnutls. It
# provides the 'z' snomask to log connecting user's ciphersuite,
# information for /stats, and an additional WHOIS line if applicable.
#<module name="m_sslstats_gnutls.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# [CONTRIB] Unlinked stats module: Provides stats character 'X' which
# shows unlinked servers.
#<module name="m_stats_unlinked.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# [CONTRIB] SVSOPER module: Allows services to forcibly oper a user
# using the SVSOPER command. This needs to also be supported in your
# services package, such as the module os_opertype in Anope.
#<module name="m_svsoper.so">

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# [CONTRIB] TOTP module: Enables two-factor authentication for oper
# blocks. NOTE: This module requires a sha1 provider to work with
# Google Authenticator. You may use m_sha1 (extras) or m_gnutls_hash
# (extras).
#<totp hash="sha256" window="5">
#
# To actually use this on oper blocks, run /totp as an oper to obtain
# a secret and QR code (if you wish to scan using your phone). This
# secret should be specified in your oper block in the format
# <oper secret="xxx"> and also added to your authenticator app. Then,
# to oper (after rehash) you run /oper username password <token>,
# token being generated by your authenticator app.
#<module name="m_totp.so">

